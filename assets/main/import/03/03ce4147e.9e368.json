[1,["a3zQCfCrBCDZJ4uf2rk5u8","e5///XXfpIDIJj4OZJ60y4","12Y9dMgWdJKJGmTiZyQR9H@fc873","1dTYyIgpFHXrUL7ts76ort","a8024nVoZFz5C7RpPry4vX@6c48a","eeuqOEqq9EhamtQR/M3Lv/","catea0DmlA87MlbNki6QVi@3b895","catea0DmlA87MlbNki6QVi@438fe","catea0DmlA87MlbNki6QVi@3004f","catea0DmlA87MlbNki6QVi@939c0","83GcGLAr1E6pZxKwcncbCJ@c2696","1e+Gqq0tlKtp9Nrfar8AqK@89a90","36rBbF175MebnOpUlSXPBs@ca7e4","f4INzoGWhGcKvwXfqhmwdD@20123","96vkES/JVE1YIFASaal9am@1a3b7","3aDI1AEnRD9aBdauQYfG6h@4873b","f6/i16FRJOtpg2pvIYyUOJ@b84cf","dbUbnUoc9KBJez59zJbDC2","11rTgL4hlPRaoq9JdRFQWT","baQuCMJOtIEo6CteZo5a9C@f9941","baQuCMJOtIEo6CteZo5a9C@6c48a","fdurYobGVA77yJOfm8b7tO@6c48a","13K/ghPzdGe506INBy0jG0@6c48a","4edPP8tsRDeqw4hUgGZhIm@6c48a"],["node","_parent","_mesh","mainTexture","_effectAsset","target","_cameraComponent","scene","_skeleton","_spriteFrame","_textureSource"],[["cc.Node",["_name","_layer","_id","_parent","_components","_lpos","_lrot","_euler","_lscale","_children"],0,1,9,5,5,5,5,12],["cc.Node",["_name","_layer","_id","_active","_children","_lpos","_parent","_components","_lrot","_euler","_lscale"],-1,2,5,1,9,5,5,5],["cc.Material",["_states","_defines","_techIdx","_props"],0,12],["cc.Node",["_name","_layer","_parent","_lpos","_children","_lrot","_euler","_components"],1,1,5,9,5,5,2],["cc.UITransform",["_name","node","_contentSize"],2,1,5],["cc.Canvas",["_name","node","_cameraComponent"],2,1,1],["cc.Widget",["_alignFlags","_originalWidth","_originalHeight","node"],0,1],["cc.Sprite",["_sizeMode","_type","_isTrimmedMode","node","_spriteFrame"],0,1,6],["cc.Camera",["_visibility","_fov","_projection","_priority","_orthoHeight","_far","_clearFlags","node","_color"],-4,1,5],["cc.MeshRenderer",["_name","node","_materials","lightmapSettings","_mesh"],2,1,3,4,6],"cc.SpriteFrame",["cc.Mesh",["_native","_hash","_struct"],1,11],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.SceneAsset",["_name"],2],["cc.SkeletalAnimation",["_useBakedAnimation","node","_clips","_sockets"],2,1,3,9],["cc.SkeletalAnimation.Socket",["path","target"],2,1],["c1b2fSMFt1Gf6HeoXkGcTsr",["node"],3,1],["32473eX+B9EEYiQKkzVW8Np",["node"],3,1],["cc.SphereCollider",["_isTrigger","_radius","node"],1,1],["cc.RigidBody",["_group","_type","node"],1,1],["e72cb1DzjhAD5EsFeAqWEWQ",["_name","node"],2,1],["cc.Scene",["_name","_children","_globals"],2,2,4],["cc.SceneGlobals",["ambient","shadows","_skybox","fog"],3,4,4,4,4],["cc.AmbientInfo",["_skyColor"],3,5],["cc.ShadowsInfo",["_bias","_near","_far","_saturation","_shadowColor"],-1,5],["cc.SkyboxInfo",[],3],["cc.FogInfo",["_fogStart","_fogEnd","_fogColor"],1,5],["0ab8aa2wglBn6tkL3SB0EUO",["node"],3,1],["cc.UIOpacity",["node"],3,1],["d18fcM9l6pLoocKxlZFu4AU",["node"],3,1],["cc.SkinnedMeshRenderer",["node","_materials","lightmapSettings","_skinningRoot","_mesh","_skeleton"],3,1,3,4,1,6,6],["cc.ModelLightmapSettings",[],3],["08c5czId0lIe7vikc8qDfcj",["node"],3,1],["cc.BoxCollider",["_isTrigger","node","_center","_size"],2,1,5,5],["cc.DirectionalLight",["_name","node","_color","_staticSettings"],2,1,5,4],["cc.StaticLightSettings",[],3],["fa4b4mq2Q1KGqcooWXTV5Ip",["node"],3,1],["cc.Skeleton",["_name","_hash","_joints","_bindposes"],0,12]],[[1,0,6,4,5,8,9,2],[4,1,2,1],[0,0,3,4,2],[3,0,2,4,3,5,6,2],[31,1],[11,0,1,2,3],[0,0,3,2],[0,0,3,4,5,6,8,7,2],[0,0,3,5,6,7,2],[0,0,3,5,6,8,7,2],[15,0,1,2],[19,0,1,2,3],[6,0,1,2,3,4],[2,2,0,1,3,4],[2,0,1,3,3],[0,0,3,5,2],[1,0,6,4,2],[1,0,6,4,5,8,10,9,2],[3,0,1,2,7,3,3],[18,0,1,2,3],[6,0,3,2],[28,0,1],[8,2,3,4,5,6,0,7,8,7],[9,1,2,3,4,1],[9,0,1,2,3,4,2],[12,0,1,2,4],[13,0,2],[0,0,9,4,8,2],[0,0,3,5,8,2],[0,0,9,4,2],[0,0,3,9,6,7,2],[0,0,3,9,5,6,8,7,2],[0,0,1,3,4,3],[0,0,1,3,4,5,6,7,3],[0,0,2,3,4,5,6,7,3],[0,0,3,4,5,6,7,2],[0,0,3,4,6,8,7,2],[1,0,4,7,5,2],[1,0,1,2,4,7,5,4],[1,0,3,1,2,4,7,5,5],[1,0,1,6,4,7,3],[1,0,2,6,4,7,3],[1,0,4,5,8,9,2],[1,0,4,5,2],[1,0,6,4,7,5,2],[1,0,6,4,8,9,2],[1,0,6,4,5,2],[1,0,3,6,4,5,3],[14,0,1,2,3,2],[16,0,1],[17,0,1],[20,0,1,2],[4,0,1,2,2],[5,0,1,2,2],[5,1,2,1],[21,0,1,2,2],[22,0,1,2,3,1],[23,0,1],[24,0,1,2,3,4,5],[25,1],[26,0,1,2,3],[27,0,1],[29,0,1],[30,0,1,2,3,4,5,1],[32,0,1],[33,0,1,2,3,2],[7,0,3,4,2],[7,1,0,2,3,4],[34,0,1,2,3,2],[35,1],[8,1,0,7,3],[36,0,1],[37,0,1,2,3,4]],[[[[13,1,[{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}}],[{"USE_TEXTURE":true}],[[[{},"tilingOffset",8,[2,1,10,0,0],"mainTexture",6,0]],11]]],0,0,[0,0],[3,4],[4,0]],[[[5,".bin",3297164954,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":224,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":224,"count":4,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-0.5,0],"maxPosition",8,[1,0.5,0.5,0]]],-1],0,0,[],[],[]],[[[25,"../res/effects/hitColor/hitColor",[{"hash":632492602,"name":"../res/effects/hitColor/hitColor|general-vs:vert|hitColor-fs:frag","glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 6) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 7) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 8) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 5) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nlayout(location = 0) out float v_fog_factor;\nlayout(location = 1) out highp vec4 v_shadowPos;\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform sampler2D cc_spotLightingMap;\n#endif\nlayout(location = 13) in vec4 a_color;\n#if HAS_SECOND_UV\n  layout(location = 14) in vec2 a_texCoord1;\n#endif\nlayout(location = 2) out vec3 v_position;\nlayout(location = 3) out vec3 v_normal;\nlayout(location = 4) out vec3 v_tangent;\nlayout(location = 5) out vec3 v_bitangent;\nlayout(location = 6) out vec2 v_uv;\nlayout(location = 7) out vec2 v_uv1;\nlayout(location = 8) out vec4 v_color;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n  v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  v_uv = a_texCoord;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1;\n  #endif\n  v_color = a_color;\n    #if CC_USE_FOG == 0\n      v_fog_factor = LinearFog(pos);\n    #elif CC_USE_FOG == 1\n      v_fog_factor = ExpFog(pos);\n    #elif CC_USE_FOG == 2\n      v_fog_factor = ExpSquaredFog(pos);\n    #elif CC_USE_FOG == 3\n      v_fog_factor = LayeredFog(pos);\n    #else\n      v_fog_factor = 1.0;\n    #endif\n  v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nlayout(location = 0) in float v_fog_factor;\nlayout(location = 6) in vec2 v_uv;\nlayout(set = 1, binding = 1) uniform sampler2D mainTexture;\nlayout(set = 1, binding = 0) uniform Constant {\n  vec4 mainColor;\n  vec4 hitColor;\n  float ratio;\n};\nvec4 frag () {\n  vec4 col = mainColor * texture(mainTexture, v_uv);\n  col.rgb = mix(col.rgb, hitColor.rgb, ratio);\n  col = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, col.rgb, v_fog_factor), col.a);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nout float v_fog_factor;\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\n#if CC_RECEIVE_SHADOW\n  uniform sampler2D cc_shadowMap;\n  uniform sampler2D cc_spotLightingMap;\n#endif\nin vec4 a_color;\n#if HAS_SECOND_UV\n  in vec2 a_texCoord1;\n#endif\nout vec3 v_position;\nout vec3 v_normal;\nout vec3 v_tangent;\nout vec3 v_bitangent;\nout vec2 v_uv;\nout vec2 v_uv1;\nout vec4 v_color;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n  v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  v_uv = a_texCoord;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1;\n  #endif\n  v_color = a_color;\n    #if CC_USE_FOG == 0\n      v_fog_factor = LinearFog(pos);\n    #elif CC_USE_FOG == 1\n      v_fog_factor = ExpFog(pos);\n    #elif CC_USE_FOG == 2\n      v_fog_factor = ExpSquaredFog(pos);\n    #elif CC_USE_FOG == 3\n      v_fog_factor = LayeredFog(pos);\n    #else\n      v_fog_factor = 1.0;\n    #endif\n  v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nin float v_fog_factor;\nin vec2 v_uv;\nuniform sampler2D mainTexture;\nlayout(std140) uniform Constant {\n  vec4 mainColor;\n  vec4 hitColor;\n  float ratio;\n};\nvec4 frag () {\n  vec4 col = mainColor * texture(mainTexture, v_uv);\n  col.rgb = mix(col.rgb, hitColor.rgb, ratio);\n  col = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, col.rgb, v_fog_factor), col.a);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n#endif\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvarying float v_fog_factor;\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n#if CC_RECEIVE_SHADOW\n  uniform sampler2D cc_shadowMap;\n  uniform sampler2D cc_spotLightingMap;\n#endif\nattribute vec4 a_color;\n#if HAS_SECOND_UV\n  attribute vec2 a_texCoord1;\n#endif\nvarying vec3 v_position;\nvarying vec3 v_normal;\nvarying vec3 v_tangent;\nvarying vec3 v_bitangent;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_color;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n  v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  v_uv = a_texCoord;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1;\n  #endif\n  v_color = a_color;\n    #if CC_USE_FOG == 0\n      v_fog_factor = LinearFog(pos);\n    #elif CC_USE_FOG == 1\n      v_fog_factor = ExpFog(pos);\n    #elif CC_USE_FOG == 2\n      v_fog_factor = ExpSquaredFog(pos);\n    #elif CC_USE_FOG == 3\n      v_fog_factor = LayeredFog(pos);\n    #else\n      v_fog_factor = 1.0;\n    #endif\n  v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform mediump vec4 cc_exposure;\n  uniform mediump vec4 cc_fogColor;\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nvarying float v_fog_factor;\nvarying vec2 v_uv;\nuniform sampler2D mainTexture;\n   uniform vec4 mainColor;\n   uniform vec4 hitColor;\n   uniform float ratio;\nvec4 frag () {\n  vec4 col = mainColor * texture2D(mainTexture, v_uv);\n  col.rgb = mix(col.rgb, hitColor.rgb, ratio);\n  col = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, col.rgb, v_fog_factor), col.a);\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]}]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":213,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":40}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_USE_FOG","type":"number","defines":[],"range":[0,4]},{"name":"CC_FORWARD_ADD","type":"boolean","defines":[]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"CC_USE_HDR","type":"boolean","defines":[]}],"blocks":[{"name":"Constant","stageFlags":16,"binding":0,"members":[{"name":"mainColor","type":16,"count":1},{"name":"hitColor","type":16,"count":1},{"name":"ratio","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]}],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_normal","type":15,"count":1,"stageFlags":1,"format":32,"location":1,"defines":[]},{"name":"a_texCoord","type":14,"count":1,"stageFlags":1,"format":21,"location":2,"defines":[]},{"name":"a_tangent","type":16,"count":1,"stageFlags":1,"format":44,"location":3,"defines":[]},{"name":"a_vertexId","type":13,"count":1,"stageFlags":1,"format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","type":"u32vec4","count":1,"stageFlags":1,"location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","type":16,"count":1,"stageFlags":1,"format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","type":13,"count":1,"stageFlags":1,"format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_color","type":16,"count":1,"stageFlags":1,"format":44,"location":13,"defines":[]},{"name":"a_texCoord1","type":14,"count":1,"stageFlags":1,"format":21,"location":14,"defines":["HAS_SECOND_UV"]}],"varyings":[{"name":"v_fog_factor","type":13,"count":1,"stageFlags":1,"location":0,"defines":[]},{"name":"v_shadowPos","type":16,"count":1,"stageFlags":1,"location":1,"defines":[]},{"name":"v_position","type":15,"count":1,"stageFlags":1,"location":2,"defines":[]},{"name":"v_normal","type":15,"count":1,"stageFlags":1,"location":3,"defines":[]},{"name":"v_tangent","type":15,"count":1,"stageFlags":1,"location":4,"defines":[]},{"name":"v_bitangent","type":15,"count":1,"stageFlags":1,"location":5,"defines":[]},{"name":"v_uv","type":14,"count":1,"stageFlags":1,"location":6,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":1,"location":7,"defines":[]},{"name":"v_color","type":16,"count":1,"stageFlags":1,"location":8,"defines":[]}]}],[{"name":"opaque","passes":[{"program":"../res/effects/hitColor/hitColor|general-vs:vert|hitColor-fs:frag","properties":{"mainTexture":{"value":"white","type":28},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"hitColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"ratio":{"type":13,"value":[0],"editor":{"slide":true,"range":[0,1,[0.01]]}}}}]},{"name":"transparent","passes":[{"program":"../res/effects/hitColor/hitColor|general-vs:vert|hitColor-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":2,"blendDstAlpha":4}]},"properties":{"mainTexture":{"value":"white","type":28},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"hitColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"ratio":{"type":13,"value":[0],"editor":{"slide":true,"range":[0,1,[0.01]]}}}}]}]]],0,0,[],[],[]],[[[26,"game"],[27,"leader",[[-6,-7,-8,-9,[28,"Brick_Holder",-10,[1,0,0.5,-0.242],[1,0.2222222222222222,0.2222222222222222,0.2222222222222222]]],1,1,1,1,4],[[48,false,-4,[7,8,9,10,11,12,13],[[10,"RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm",-1],[10,"RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/cp",-2],[10,"RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck",-3]]],[49,-5]],[1,4.5,4.5,4.5]],[37,"playerMgr",[-14,-15,-16,-17],[[50,-11],[19,true,15,-12],[11,8,4,-13]],[1,0,0,-87]],[29,"mapMgr",[[-19,2,[6,"AIParentNode",-20],[6,"buildingParentNode",-21],[6,"soldierParentNode",-22]],1,1,4,4,4],[[51,"mapMgr<MapMgr>",-18]]],[38,"Canvas",524288,"e1Dz6c2NNP67QtGGof806o",[-27,-28,-29],[[52,"Canvas<UITransform>",-23,[5,750,1334]],[53,"Canvas<Canvas>",-25,-24],[20,45,-26]],[1,375,667,0]],[39,"BGCanvas",false,33554432,"42kA+2V1RIt4LzO0b00gMZ",[-34,-35],[[1,-30,[5,750,1334]],[54,-32,-31],[20,45,-33]],[1,375,667,0]],[55,"game",[-36,-37,5,4],[56,[57,[4,33546240]],[58,0.1,1,30,0.23529411764705882,[4,1006632960]],[59],[60,300,200,[4,717604293]]]],[40,"bgLayer",16,5,[-40,-41],[[1,-38,[5,750,1334]],[12,45,100,100,-39]]],[41,"gameNode","f2fCnmaidBzIZbiAisrMFg",6,[3,-43],[[61,-42]]],[30,"characterNode",2,[[1,-44,[6,"attackAreaNode",-45]],1,1,4],[3,0,1,0,6.123233995736766e-17],[1,0,180,0]],[42,"Bip001 Spine",[-46,-47,-48],[1,0.018833827227354,-0.0000294281544483965,2.61595456407804e-8],[3,-0.0000020804759106073513,-6.93676029189102e-7,0.0003981589610629309,0.9999999207323129],[1,-0.00023837338537074012,-0.00007939451343745723,0.045625657459215596]],[43,"Bip001 Neck",[-49,-50,-51],[1,0.0444481447339058,-0.0000186951456271345,-5.18775751523481e-11]],[2,"BloodBarParentNode",4,[[1,-52,[5,750,1334]],[12,45,100,100,-53],[21,-54]]],[2,"BrickCountParentNode",4,[[1,-55,[5,750,1334]],[12,45,100,100,-56],[21,-57]]],[44,"cameraMgr",3,[-59],[[62,-58]],[1,0,0,-87]],[16,"RootNode",1,[-60,-61]],[7,"js",15,[[63,-62,[0],[4],1,1,2],[64,-63]],[1,0.0095185674726963,0.798622488975525,0.0111793326213956],[3,3.090862019268389e-8,0.7071067811865468,0.7071067811865468,-3.090862019268389e-8],[1,2.53999996185303,2.53999996185303,2.53999996185303],[1,-89.99999999999999,-179.99999499104368,0]],[31,"Bip001",15,[[[8,"Bip001 Footsteps",-64,[1,0,0,-0.140952035784721],[3,-1.2382174648761278e-33,1.2382192097505876e-33,0.7071063043492202,0.7071072580235535],[1,0,-2.006615942681421e-31,90]],-65],4,1],[1,-6.80633061023173e-9,0.362983614206314,-0.0049648373387754],[3,-0.5000003576277411,-0.4999996423720031,-0.4999996423720031,0.5000003576277411],[1,2.53999996185303,2.53999996185303,2.53999996185303],[1,-90,-89.99991803772988,0]],[3,"Bip001 Head",11,[[15,"Bip001 HeadNub",-66,[1,0.113895677030087,-2.98023217215615e-10,3.63797872577655e-14]],[9,"cp",-67,[1,0.0680470988154411,0.010122649371624,-2.45571158075109e-7],[3,0.7070172322448603,0.011292389423700552,0.7070159805473393,-0.011292408981474258],[1,39.3700752258301,39.3700637817383,39.3700637817383],[1,-178.16991057930906,-89.999898564493,3.517929872425349e-8]]],[1,0.021025313064456,-0.00000289738181891153,-7.98536323870502e-12],[3,1.596945911985004e-14,1.1042968541575864e-9,-0.0003988305609355657,0.9999999204670887],[1,5.2299236525784045e-11,1.2654312906848432e-7,-0.04570261697650697]],[17,"Bip001 R Forearm Socket",1,[-68],[1,-0.22514894561188864,0.6018762777312281,-0.003173639335988042],[3,-0.03170778163860421,0.7093810063175777,-0.7032143284884398,-0.03553607558484886],[1,2.5399999618530313,2.539999961853032,2.5399999618530305],[1,89.48613239532554,-174.54792325040802,0.2860881239290699]],[17,"Bip001 Neck Socket",1,[-69],[1,3.386741823574248e-7,0.6176140711224769,-0.005001271588255192],[3,0.5001993971254979,0.49979985847040004,0.5001993826443026,0.4998012026701365],[1,2.5399999618530305,2.539999961853031,2.5399999618530313],[1,0,90.04562969365527,90]],[2,"brickTrigger",2,[[19,true,5,-70],[11,4,4,-71]]],[2,"hitPoint",2,[[11,16,4,-72],[65,true,-73,[1,0,3,0],[1,1.5,6,1.5]]]],[32,"BGFrame",16,7,[[1,-74,[5,750,1680]],[66,0,-75,18]]],[33,"bgStar",16,7,[[1,-76,[5,2048,4096]],[67,2,0,false,-77]],[1,-724,-724,0],[3,0,0,-0.38268343236508984,0.9238795325112867],[1,0,0,-45.000000000000014]],[34,"Main Light","c0y6F5f+pAvI805TdmxIjx",6,[[68,"Main Light<DirectionalLight>",-78,[4,4292277503],[69]]],[1,-0.078,0.2,-0.045],[3,-0.4829629131445341,-0.2241438680420134,-0.12940952255126034,0.8365163037378079],[1,-60,-30,0]],[16,"shakeNode",14,[-79]],[35,"camera",26,[[70,60,1082130440,-80]],[1,0,32,-28],[3,-2.5877905075098285e-17,0.9063077870366499,0.42261826174069944,5.549534652183773e-17],[1,-50,180,1.059337511532038e-30]],[45,"Bip001 Pelvis",17,[10],[3,-0.4999999925491744,-0.4999999925491744,-0.4999993070957696,0.5000007078049007],[1,-89.9999197452773,-89.9999197452773,-0.0000017074910412130916]],[46,"Bip001 Spine1",10,[11],[1,0.0369662269949913,-0.0000311930452880915,-8.64929447508267e-11]],[0,"Bip001 L Clavicle",11,[-81],[1,-0.00644929893314838,0.0000196039673028281,0.0112432977184653],[3,0.7071077086257632,-0.00028150961753757044,0.7071057416725245,0.0002815104033409767],[1,179.95437934879405,-89.99984062077884,2.2114411298464858e-10]],[0,"Bip001 L UpperArm",30,[-82],[1,0.0328971147537231,2.77555749952435e-19,3.81469718035987e-8],[3,0.004248980986326221,-0.0028757071717542887,-0.00790969298754721,0.9999555556251901],[1,0.4843357770616092,-0.3257085474228784,-0.907781920326866]],[3,"Bip001 L Forearm",31,[[8,"Bip001 L Hand",-83,[1,0.0254469476640224,2.38418573772492e-9,0],[3,-0.7068252124052272,2.739868115369013e-10,5.519838181165487e-11,0.707388237892252],[1,-89.95437890588059,2.6680427833453783e-8,-1.7717470791242232e-8]]],[1,0.0452506951987743,-5.9604643443123e-10,3.55271359939116e-17],[3,9.76745878873005e-10,1.1263132331595563e-9,-0.03964754454903106,0.9992137269929955],[1,1.1732482986773384e-7,1.3382285205473308e-7,-4.544465067282435]],[0,"Bip001 R Clavicle",11,[-84],[1,-0.0064492798410356,0.0000196665514522465,-0.011243293993175],[3,0.7071077086257632,-0.00028150961753757044,-0.7071057416725245,-0.0002815104033409767],[1,-179.95437934879405,89.99984062077884,2.2114411298464858e-10]],[0,"Bip001 R UpperArm",33,[-85],[1,0.0328971296548843,-1.49011608607807e-10,-3.55271359939116e-17],[3,-0.004248981452081548,0.002875706473325982,-0.007909690193754471,0.9999555556473188],[1,-0.48433583196127894,0.3257084682978166,-0.9077815999892987]],[3,"Bip001 R Forearm",34,[[8,"Bip001 R Hand",-86,[1,0.0254469383507967,1.19209286886246e-9,3.55271359939116e-17],[3,0.7068252124052272,1.3925524375773617e-9,1.0642582606758513e-9,0.707388237892252],[1,89.95437890588059,2.6680426466024807e-8,1.9906100194823791e-7]]],[1,0.0445073246955872,-8.94069651646845e-10,3.55271359939116e-17],[3,-9.675150406741e-10,-8.936657272129429e-10,-0.039647548268465366,0.9992137268454131],[1,-1.1520423767381365e-7,-1.070582915641194e-7,-4.544465493833598]],[0,"Bip001 R Thigh",10,[-87],[1,-0.0188337806612253,0.0000444973993580788,-0.0234699938446283],[3,0.03970730972086135,0.9991829199797525,-0.0018453497544229469,-0.007308670176617885],[1,0.17859719712492694,-179.16891759944417,4.552739654832165]],[0,"Bip001 R Calf",36,[-88],[1,0.0596093274652958,2.22044599961948e-18,0],[3,2.007508940883502e-10,-1.884440881487743e-9,-0.07913471247976768,0.9968639311765394],[1,5.917903676577058e-9,-2.1615056996001633e-7,-9.077661451941884]],[0,"Bip001 R Foot",37,[-89],[1,0.0637154206633568,-1.78813930329369e-9,-4.76837147544984e-9],[3,-0.001265489139879975,-0.007431325460620155,0.039884995443311984,0.9991758409197163],[1,-0.11128438806977745,-0.8478108236165889,4.572647183182068]],[3,"Bip001 R Toe0",38,[[15,"Bip001 R Toe0Nub",-90,[1,0.00602587219327688,-3.46944687440543e-20,4.76837147544984e-9]]],[1,0.0197665002197027,0.0454515963792801,-7.15255721317476e-9],[3,1.545427989827514e-8,1.5454224831212194e-8,0.7071067811865472,0.7071067811865472],[1,0,0.0000025044732624376608,90]],[0,"Bip001 L Thigh",10,[-91],[1,-0.0188337694853544,0.0000443671633547638,0.0234700012952089],[3,0.03970753133686219,0.9991829062703631,0.0018480930499008663,0.007308647229260508],[1,-0.17891221705635266,179.16893278524017,4.552767347086526]],[0,"Bip001 L Calf",40,[-92],[1,0.0596093460917473,-3.33066899942921e-18,9.53674295089968e-9],[3,-5.50033515960349e-12,1.4018153720517664e-9,-0.0791347124797677,0.9968639311765396],[1,1.2236846541792092e-8,1.621129657006111e-7,-9.077661451941887]],[0,"Bip001 L Foot",41,[-93],[1,0.0637153908610344,-5.9604643443123e-10,-7.15255721317476e-9],[3,0.0012654859960316946,0.007431413466876296,0.03988499169802042,0.9991758404186557],[1,0.11128362650292561,0.8478209473945603,4.572646760807437]],[3,"Bip001 L Toe0",42,[[9,"Bip001 L Toe0Nub",-94,[1,0.00602586241438985,0,-4.44089199923895e-18],[3,-5.198667763091875e-14,-5.684341886080795e-14,0.9999999999999991,-4.371139539216526e-8],[1,-1,-1,-1],[1,179.9999999999935,179.99999999999403,-0.000005008956945197328]]],[1,0.0197665002197027,0.0454516001045704,-4.76837147544984e-9],[3,-1.54542425947809e-8,-1.54544237831816e-8,0.7071067811865472,0.7071067811865472],[1,0,-0.0000025044672171476483,90]],[7,"hammer",19,[[23,-95,[3],[4],4]],[1,0.0628497302532196,-0.0550066269934177,-0.0133138466626406],[3,-0.4174391663860251,-0.4667532186843214,-0.5241404817695496,0.5772025039664597],[1,0.0010659999679774,0.0010659999679774,0.0010659999679774],[1,-84.00191309310162,-89.12947296146353,-12.438305950184562]],[9,"cp Socket",1,[1,-1.2187348612166137e-8,0.8438579813002756,0.02074550961818494],[3,-0.6957241865399985,-6.214001747362153e-7,-3.1411639756118184e-7,0.7183090256030288],[1,99.99998957175941,99.99996050376666,99.99996050376664],[1,-88.16990728442963,-0.00007619143819848881,0.000023684985212949097]],[7,"bag",20,[[23,-96,[5],[4],6]],[1,-0.0345259085297585,0.00849992875009775,-7.68899752756624e-8],[3,0.5178453913775346,0.4798546425575727,0.5193651310028792,-0.4814930252281486],[1,0.0016390000237152,0.0016390000237152,0.0016390000237152],[1,-94.34766992273826,-90.00007073608327,-0.18107478272628572]],[36,"shadow",9,[[24,"Quad<ModelComponent>",-97,[14],[4],15]],[3,4.3297802811774664e-17,0.7071067811865476,0.7071067811865475,-4.329780281177467e-17],[1,2,2,2],[1,-89.99999999999999,-180,0]],[47,"guideArrow",false,2,[-98],[1,0,-0.11,0]],[7,"arrow",48,[[24,"Quad<ModelComponent>",-99,[16],[4],17]],[1,0,0,1.5],[3,-4.329780281177466e-17,0.7071067811865476,0.7071067811865475,4.329780281177467e-17],[1,3,3,1],[1,-90,180,0]],[2,"effectMgr",8,[[71,-100]]],[18,"BGCamera_Canvas",16,5,[-101],[1,0,0,1000]],[22,0,2,667,2000,6,16,51,[4,0]],[18,"UICamera_Canvas",524288,4,[-102],[1,0,0,1000]],[22,0,1073741824,667,2000,0,42467328,53,[4,0]]],0,[0,5,19,0,5,45,0,5,20,0,0,1,0,0,1,0,-1,15,0,-2,19,0,-3,45,0,-4,20,0,1,1,0,0,2,0,0,2,0,0,2,0,-1,9,0,-2,21,0,-3,22,0,-4,48,0,0,3,0,-1,14,0,1,3,0,1,3,0,1,3,0,0,4,0,6,54,0,0,4,0,0,4,0,-1,53,0,-2,12,0,-3,13,0,0,5,0,6,52,0,0,5,0,0,5,0,-1,51,0,-2,7,0,-1,25,0,-2,8,0,0,7,0,0,7,0,-1,23,0,-2,24,0,0,8,0,-2,50,0,-2,47,0,1,9,0,-1,29,0,-2,36,0,-3,40,0,-1,30,0,-2,33,0,-3,18,0,0,12,0,0,12,0,0,12,0,0,13,0,0,13,0,0,13,0,0,14,0,-1,26,0,-1,16,0,-2,17,0,0,16,0,0,16,0,1,17,0,-2,28,0,1,18,0,1,18,0,-1,44,0,-1,46,0,0,21,0,0,21,0,0,22,0,0,22,0,0,23,0,0,23,0,0,24,0,0,24,0,0,25,0,-1,27,0,0,27,0,-1,31,0,-1,32,0,1,32,0,-1,34,0,-1,35,0,1,35,0,-1,37,0,-1,38,0,-1,39,0,1,39,0,-1,41,0,-1,42,0,-1,43,0,1,43,0,0,44,0,0,46,0,0,47,0,-1,49,0,0,49,0,0,50,0,-1,52,0,-1,54,0,7,6,1,1,9,2,1,3,3,1,8,4,1,6,5,1,6,10,1,28,11,1,29,102],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,2,8,-1,2,-1,2,-1,-2,-3,-4,-5,-6,-7,-1,2,-1,2,9],[5,6,7,1,8,1,9,10,11,12,13,14,15,16,17,2,18,2,19]],[[{"name":"Main_BG","rect":{"x":0,"y":0,"width":750,"height":1680},"offset":{"x":0,"y":0},"originalSize":{"width":750,"height":1680},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[10],0,[0],[10],[20]],[[[5,".bin",727780232,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9072,"length":456,"count":228,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":9072,"count":162,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-20,-33.099456787109375,-89.09342193603516],"maxPosition",8,[1,20,33.099456787109375,89.09342193603516]]],-1],0,0,[],[],[]],[[[5,".bin",728547302,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":145760,"length":5160,"count":2580,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":145760,"count":1822,"stride":80},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]]},"minPosition",8,[1,-0.17084592580795288,-0.0531635656952858,-0.31441831588745117],"maxPosition",8,[1,0.17075476050376892,0.053163573145866394,0.06348621100187302]]],-1],0,0,[],[],[]],[[[72,"Skin-0",4141789131,["RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head","RootNode/Bip001/Bip001 Pelvis","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf/Bip001 R Foot","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf","RootNode/Bip001","RootNode/Bip001/Bip001 Footsteps","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf/Bip001 R Foot/Bip001 R Toe0","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf/Bip001 R Foot/Bip001 R Toe0/Bip001 R Toe0Nub","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot/Bip001 L Toe0/Bip001 L Toe0Nub","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot/Bip001 L Toe0","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bip001 HeadNub"],[[[7,-0.0000013430886838250444,0.0000013152706515029422,-1.0000001192092896,0,1.1735530353485651e-13,1.0000001192092896,0.0000013152706515029422,0,1,1.6491698414874967e-12,-0.0000013430887975118821,0,0.05023786798119545,0.0044019510969519615,0.0002217390137957409,1],[7,-0.0000013867999086869531,-0.0000028451297566789435,-1.0000001192092896,0,1.2117666895947177e-13,1.0000001192092896,-0.0000028451297566789435,0,1,-4.066802884034049e-12,-0.0000013868001360606286,0,0.17151139676570892,0.004401312209665775,0.0002215503336628899,1],[7,-0.014458739198744297,0.004269298631697893,0.9998863935470581,0,0.07858312875032425,0.9969027638435364,-0.0031202163081616163,0,-0.996802568435669,0.07852909713983536,-0.014749452471733093,0,-0.17027458548545837,0.01775512658059597,-0.026232533156871796,1],[7,-1.1612339978483988e-9,0.0000013152708788766176,-1.0000001192092896,0,0.000796317879576236,0.9999997615814209,0.0000013152694009477273,0,0.9999995827674866,-0.000796317879576236,-2.20860751909413e-9,0,0.15268103778362274,0.004309158306568861,0.00022180618543643504,1],[7,-4.371138828673793e-8,-0.0000014583297343051527,1.0000001192092896,0,3.882602942086423e-15,1.0000001192092896,0.0000014583297343051527,0,-1,6.762822181601014e-14,-4.371139183945161e-8,0,-0.2944357395172119,0.004794209264218807,-0.02187730185687542,1],[7,-0.014951234683394432,0.0019346222979947925,0.9998863935470581,0,-0.0796855017542839,0.9968150854110718,-0.0031202121172100306,0,-0.9967079758644104,-0.07972309738397598,-0.014749456197023392,0,-0.22980599105358124,-0.018736746162176132,-0.026232535019516945,1],[7,-0.0000014583297343051527,-1.0000001192092896,4.057416195779167e-16,0,1.0000001192092896,-0.0000014583297343051527,-6.123193896511947e-17,0,6.12325345351605e-17,4.057415401685779e-16,1,0,0.004401312209665775,0.00022179428196977824,0.17151139676570892,1],[7,-1,8.742277657347586e-8,2.4492934404725397e-16,0,-8.742277657347586e-8,-1,-2.1412403382377652e-23,0,2.4492934404725397e-16,-4.2824806764755304e-23,1,0,0.00022180029191076756,-0.004401311278343201,0.3142022490501404,1],[7,-0.0000014590264072467107,4.3711455788297826e-8,1.0000001192092896,0,1.0000001192092896,6.371493637595885e-14,0.0000014590264072467107,0,6.12325345351605e-17,1,-4.3711459341011505e-8,0,-0.04065738990902901,0.3142022490501404,-0.021877305582165718,1],[7,-0.0000014590264072467107,4.3711455788297826e-8,1.0000001192092896,0,1.0000001192092896,6.371493637595885e-14,0.0000014590264072467107,0,6.12325345351605e-17,1,-4.3711459341011505e-8,0,-0.046683259308338165,0.3142022490501404,-0.021877305582165718,1],[7,-1.1612339978483988e-9,0.0000013152708788766176,-1.0000001192092896,0,0.000796317879576236,0.9999997615814209,0.0000013152694009477273,0,0.9999995827674866,-0.000796317879576236,-2.20860751909413e-9,0,0.07126668840646744,0.004359046928584576,0.00022180634550750256,1],[7,1.0000001192092896,0.0000014583297343051527,-4.371145223558415e-8,0,0.0000014583297343051527,-1.0000001192092896,-6.000499982962079e-14,0,-4.371145223558415e-8,-3.7406995124329104e-15,-1,0,-0.011465092189610004,-0.0044012973085045815,-0.07771246135234833,1],[7,-1.1612339978483988e-9,0.0000013152708788766176,-1.0000001192092896,0,0.000796317879576236,0.9999997615814209,0.0000013152694009477273,0,0.9999995827674866,-0.000796317879576236,-2.20860751909413e-9,0,0.11571478843688965,0.0043403515592217445,0.00022180627274792641,1],[7,0.9998583197593689,0.015795700252056122,0.005818342324346304,0,0.015844574198126793,-0.9998387694358826,-0.008452082984149456,0,0.005683897528797388,0.008543075062334538,-0.9999473094940186,0,-0.04384448006749153,-0.0044373515993356705,-0.07800368964672089,1],[7,0.9954633712768555,0.09496757388114929,0.005818342324346304,0,0.09501475095748901,-0.9954399466514587,-0.00845208577811718,0,0.004989136941730976,0.008966569788753986,-0.9999473094940186,0,-0.08772245794534683,-0.01142375823110342,-0.07800369709730148,1],[7,0.9954633712768555,0.00589396059513092,-0.09496290981769562,0,0.09501475095748901,-0.009244726039469242,0.9954328536987305,0,0.004989136941730976,-0.9999398589134216,-0.009762800298631191,0,-0.11316941678524017,-0.07801277190446854,0.011361641809344292,1],[7,0.014458686113357544,-0.004272228106856346,0.9998862743377686,0,0.07858318090438843,0.9969027638435364,0.0031231401953846216,0,-0.996802568435669,0.07852910459041595,0.014749627560377121,0,-0.17028099298477173,0.017757022753357887,0.02578902430832386,1],[7,-1.0000001192092896,0.0000014583297343051527,-4.371132789060539e-8,0,-0.0000014583297343051527,-1.0000001192092896,-6.74549527563198e-14,0,-4.371133144331907e-8,-3.709419432723756e-15,1,0,-0.011021504178643227,-0.0044012973085045815,0.07771246135234833,1],[7,-4.371138828673793e-8,-0.0000014583297343051527,1.0000001192092896,0,3.882602942086423e-15,1.0000001192092896,0.0000014583297343051527,0,-1,6.762822181601014e-14,-4.371139183945161e-8,0,-0.2944357693195343,0.004794209264218807,0.021433664485812187,1],[7,0.014951642602682114,-0.0019375364063307643,0.9998862743377686,0,-0.07968544960021973,0.9968150854110718,0.003123148810118437,0,-0.9967079758644104,-0.07972308993339539,0.014749630354344845,0,-0.2298126220703125,-0.018735885620117188,0.02578902617096901,1],[7,0.0000012841807119912119,-4.371132789060539e-8,-1.0000001192092896,0,1.0000001192092896,5.6072015791348156e-14,0.0000012841807119912119,0,6.123219704547058e-17,1,-4.371132789060539e-8,0,-0.04668319970369339,0.3142022490501404,-0.021433820948004723,1],[7,-0.0000014590264072467107,-4.371132789060539e-8,1.0000001192092896,0,1.0000001192092896,-6.383721405222448e-14,0.0000014590264072467107,0,6.12325345351605e-17,1,4.371132789060539e-8,0,-0.040657393634319305,0.3142022490501404,0.021433694288134575,1],[7,-0.9998583793640137,-0.015792787075042725,0.0058183190412819386,0,0.015841662883758545,-0.9998388290405273,0.008452100679278374,0,0.005683899391442537,0.008543075993657112,0.9999473094940186,0,-0.04340095445513725,-0.0044303457252681255,0.07800110429525375,1],[7,-0.9954636693000793,-0.0949646607041359,0.005818316712975502,0,0.09501183032989502,-0.9954403638839722,0.008452103473246098,0,0.004989135544747114,0.008966571651399136,0.9999473094940186,0,-0.08802192658185959,-0.01144053228199482,0.07800108939409256,1],[7,-0.9954636693000793,-0.005893931724131107,-0.09496000409126282,0,0.09501183032989502,-0.009244744665920734,-0.9954332709312439,0,0.004989135544747114,-0.9999398589134216,0.009762800298631191,0,-0.11346888542175293,-0.0780101791024208,-0.011378416791558266,1],[7,-0.0000013430886838250444,0.0000013152706515029422,-1.0000001192092896,0,1.1735530353485651e-13,1.0000001192092896,0.0000013152706515029422,0,1,1.6491698414874967e-12,-0.0000013430887975118821,0,-0.06365782767534256,0.0044021038338541985,0.00022189199808053672,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[5,".bin",1831870985,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":15120,"length":792,"count":396,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":15120,"count":270,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-23.86367416381836,-23.796659469604492,-39.32977294921875],"maxPosition",8,[1,25.35637092590332,41.32084274291992,14.48447036743164]]],-1],0,0,[],[],[]],[[[13,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[3,4],[21,0]],[[[14,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[3,4],[22,3]],[[[14,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[3,4],[23,3]]]]
